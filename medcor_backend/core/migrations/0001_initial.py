# Generated by Django 5.2.4 on 2025-07-17 11:36

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('specialty', models.CharField(max_length=100)),
                ('experience', models.IntegerField()),
                ('education', models.TextField()),
                ('photo', models.TextField()),
                ('bio', models.TextField()),
                ('description', models.TextField(blank=True, help_text='Short hover description for HeyGen', null=True)),
                ('avatar_id', models.CharField(blank=True, help_text='HeyGen avatar ID', max_length=255, null=True)),
                ('available', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='FaceAnalysisReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('patient_name', models.CharField(max_length=100)),
                ('patient_email', models.EmailField(max_length=254)),
                ('patient_phone', models.CharField(max_length=20)),
                ('patient_job', models.CharField(max_length=100)),
                ('analysis_result', models.JSONField()),
                ('pdf_path', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('name', models.CharField(max_length=100)),
                ('profile_picture', models.TextField(blank=True, null=True)),
                ('preferred_language', models.CharField(default='en', max_length=10)),
                ('face_id', models.CharField(blank=True, max_length=255, null=True)),
                ('person_id', models.CharField(blank=True, max_length=255, null=True)),
                ('last_face_login', models.DateTimeField(blank=True, null=True)),
                ('face_login_enabled', models.BooleanField(default=False)),
                ('face_registered', models.BooleanField(default=False)),
                ('oauth_provider', models.CharField(blank=True, max_length=50, null=True)),
                ('oauth_provider_id', models.CharField(blank=True, max_length=255, null=True)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_new_user', models.BooleanField(default=True)),
                ('role', models.CharField(choices=[('patient', 'Patient'), ('doctor', 'Doctor'), ('admin', 'Admin'), ('clinic', 'Clinic')], default='patient', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('email_verified', models.BooleanField(default=False)),
                ('reset_password_token', models.CharField(blank=True, max_length=255, null=True)),
                ('reset_password_expires', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('response', models.TextField()),
                ('avatar_response', models.JSONField(blank=True, null=True)),
                ('language', models.CharField(default='en', max_length=10)),
                ('speaker_type', models.CharField(choices=[('nurse', 'Nurse'), ('doctor', 'Doctor')], default='nurse', max_length=20)),
                ('face_recognition_data', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('doctor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.doctor')),
            ],
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('patient_name', models.CharField(max_length=100)),
                ('patient_email', models.EmailField(max_length=254)),
                ('patient_phone', models.CharField(max_length=20)),
                ('appointment_date', models.DateTimeField()),
                ('appointment_time', models.CharField(max_length=20)),
                ('reason', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('cancelled', 'Cancelled'), ('completed', 'Completed')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='core.doctor')),
            ],
        ),
        migrations.CreateModel(
            name='FaceRecognitionLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.CharField(max_length=255)),
                ('face_id', models.CharField(max_length=255)),
                ('confidence', models.IntegerField(help_text='Confidence score 0-100')),
                ('detected_language', models.CharField(blank=True, max_length=10, null=True)),
                ('image_hash', models.CharField(help_text='Hash of image for privacy', max_length=255)),
                ('recognition_status', models.CharField(choices=[('recognized', 'Recognized'), ('new_face', 'New Face'), ('failed', 'Failed')], max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='HairAnalysisReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.CharField(max_length=255)),
                ('hair_type', models.CharField(max_length=100)),
                ('hair_condition', models.CharField(max_length=100)),
                ('scalp_health', models.CharField(max_length=100)),
                ('recommendations', models.JSONField()),
                ('confidence', models.IntegerField(help_text='Confidence score 0-100')),
                ('analysis_result', models.JSONField(help_text='Full YCE response')),
                ('image_hash', models.CharField(help_text='Hash of image for privacy', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
