name: MedCor Backend CI/CD Pipeline

on:
  push:
    branches: [dev, main]
  pull_request:
    branches: [dev, main]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: medcor-backend
  IMAGE_TAG: ${{ github.sha }}

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: medcor_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run linting
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          black --check .
          isort --check-only .

      - name: Run security checks
        run: |
          bandit -r . -f json -o bandit-report.json || true
          safety check --json --output safety-report.json || true

      - name: Run tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/medcor_test_db
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key
          DEBUG: True
        run: |
          python manage.py test --verbosity=2

      - name: Generate coverage report
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/medcor_test_db
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key
          DEBUG: True
        run: |
          coverage run --source='.' manage.py test
          coverage report
          coverage html

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_NAME: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}
        run: |
          # Build Docker image
          docker build -t $IMAGE_NAME:$IMAGE_TAG .

          # Tag for environment
          if [ "${{ github.ref }}" = "refs/heads/dev" ]; then
            docker tag $IMAGE_NAME:$IMAGE_TAG $IMAGE_NAME:dev-latest
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            docker tag $IMAGE_NAME:$IMAGE_TAG $IMAGE_NAME:latest
            docker tag $IMAGE_NAME:$IMAGE_TAG $IMAGE_NAME:prod-latest
          fi

          # Push images
          docker push $IMAGE_NAME:$IMAGE_TAG
          if [ "${{ github.ref }}" = "refs/heads/dev" ]; then
            docker push $IMAGE_NAME:dev-latest
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            docker push $IMAGE_NAME:latest
            docker push $IMAGE_NAME:prod-latest
          fi

  deploy-dev:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    environment: development

    steps:
      - name: Deploy to development
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEV_SERVER_HOST }}
          username: ${{ secrets.DEV_SERVER_USER }}
          key: ${{ secrets.DEV_SERVER_SSH_KEY }}
                     script: |
             cd /var/www/html/medcor_backend2
             sudo ./scripts/deploy.sh development dev-latest
             
             # Verify services are running
             sudo systemctl status mcp-server.service || echo "MCP server service check failed"
             sudo systemctl status rabbitmq-server.service || echo "RabbitMQ service check failed"

      - name: Run smoke tests
        run: |
          python scripts/smoke_tests.py --environment=development --base-url=http://api.medcor.ai

  deploy-prod:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Deploy to production
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_SERVER_HOST }}
          username: ${{ secrets.PROD_SERVER_USER }}
          key: ${{ secrets.PROD_SERVER_SSH_KEY }}
                     script: |
             cd /var/www/html/medcor_backend2
             sudo ./scripts/deploy.sh production latest
             
             # Verify services are running
             sudo systemctl status mcp-server.service || echo "MCP server service check failed"
             sudo systemctl status rabbitmq-server.service || echo "RabbitMQ service check failed"

      - name: Run smoke tests
        run: |
          python scripts/smoke_tests.py --environment=production --base-url=https://api.medcor.ai

      - name: Notify deployment success
        if: success()
        uses: 8398a7/action-slack@v3.15.0
        with:
          status: success
          text: "✅ Production deployment successful for MedCor Backend"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify deployment failure
        if: failure()
        uses: 8398a7/action-slack@v3.15.0
        with:
          status: failure
          text: "❌ Production deployment failed for MedCor Backend"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
