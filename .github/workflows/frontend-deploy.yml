name: Frontend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths: [ 'client/**', 'package.json', 'vite.config.ts', 'tailwind.config.ts' ]
  pull_request:
    branches: [ main ]
    paths: [ 'client/**', 'package.json', 'vite.config.ts', 'tailwind.config.ts' ]

env:
  AWS_REGION: us-east-1
  S3_BUCKET: medcor-frontend-prod
  CLOUDFRONT_DISTRIBUTION_ID: E1234567890ABC

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Type check
      run: npm run check
    
    - name: Lint code
      run: |
        npm install eslint @typescript-eslint/eslint-plugin @typescript-eslint/parser
        npx eslint client/src --ext .ts,.tsx --max-warnings 0
    
    - name: Run tests
      run: |
        npm install vitest @testing-library/react @testing-library/jest-dom jsdom
        npm run test:ci || echo "Tests not configured yet"
    
    - name: Build application
      env:
        VITE_API_BASE_URL: https://api.medcor.ai
        VITE_APP_VERSION: ${{ github.sha }}
        VITE_NODE_ENV: production
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: dist/
        retention-days: 1

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: npm audit --audit-level=high
    
    - name: Check for vulnerabilities
      run: |
        npm install audit-ci
        npx audit-ci --config audit-ci.json || true

  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      env:
        VITE_API_BASE_URL: https://api.medcor.ai
        VITE_APP_VERSION: ${{ github.sha }}
        VITE_NODE_ENV: production
        VITE_ENABLE_ANALYTICS: true
        VITE_ENABLE_ERROR_REPORTING: true
        VITE_ENABLE_DEBUG_MODE: false
      run: npm run build
    
    - name: Optimize build
      run: |
        # Remove source maps in production
        find dist -name "*.map" -delete
        
        # Compress files
        npm install -g gzip-size-cli
        echo "Build size analysis:"
        gzip-size dist/assets/*.js
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: production-build
        path: dist/
        retention-days: 30

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: production-build
        path: dist/
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Deploy to S3
      run: |
        aws s3 sync dist/ s3://${{ env.S3_BUCKET }} --delete --cache-control "public,max-age=31536000,immutable" --exclude "*.html" --exclude "service-worker.js"
        aws s3 cp dist/index.html s3://${{ env.S3_BUCKET }}/index.html --cache-control "public,max-age=0,must-revalidate"
        aws s3 cp dist/service-worker.js s3://${{ env.S3_BUCKET }}/service-worker.js --cache-control "public,max-age=0,must-revalidate" || echo "No service worker found"
    
    - name: Invalidate CloudFront cache
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
          --paths "/*"
    
    - name: Update deployment status
      run: |
        echo "Deployment completed at $(date)"
        echo "Frontend URL: https://medcor.ai"
        echo "API URL: https://api.medcor.ai"

  e2e-tests:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install Playwright
      run: |
        npm install @playwright/test
        npx playwright install --with-deps
    
    - name: Run E2E tests
      run: |
        npx playwright test --config=playwright.config.ts
      env:
        PLAYWRIGHT_TEST_BASE_URL: https://medcor.ai
        PLAYWRIGHT_API_URL: https://api.medcor.ai
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-results
        path: test-results/
        retention-days: 7

  notify:
    needs: [test, security, build, deploy, e2e-tests]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        text: |
          Frontend deployment ${{ job.status }}
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
          URL: https://medcor.ai