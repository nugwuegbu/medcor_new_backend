name: Security Scan

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: "0 2 * * 1" # Weekly on Monday at 2 AM

env:
  PYTHON_VERSION: "3.11"

jobs:
  security-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit safety semgrep

      - name: Run Bandit security scan
        run: |
          bandit -r core/ appointments/ medical_records/ treatments/ subscription_plans/ specialty/ tenants/ youcam/ email_service/ -f json -o bandit-report.json --severity-level medium
          bandit -r core/ appointments/ medical_records/ treatments/ subscription_plans/ specialty/ tenants/ youcam/ email_service/ -f txt --severity-level medium

      - name: Run Safety vulnerability scan
        run: |
          safety check --json --output safety-report.json
          safety check

      - name: Run Semgrep security scan
        run: |
          semgrep --config=auto --json --output=semgrep-report.json .
          semgrep --config=auto .

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            semgrep-report.json

      - name: Comment PR with security findings
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');

            // Read security reports
            let banditIssues = [];
            let safetyIssues = [];

            try {
              const banditReport = JSON.parse(fs.readFileSync('bandit-report.json', 'utf8'));
              banditIssues = banditReport.results || [];
            } catch (e) {
              console.log('No bandit report found');
            }

            try {
              const safetyReport = JSON.parse(fs.readFileSync('safety-report.json', 'utf8'));
              safetyIssues = safetyReport || [];
            } catch (e) {
              console.log('No safety report found');
            }

            // Create comment
            let comment = '## 🔒 Security Scan Results\n\n';

            if (banditIssues.length > 0) {
              comment += `### ⚠️ Bandit Security Issues (${banditIssues.length})\n`;
              banditIssues.slice(0, 10).forEach(issue => {
                comment += `- **${issue.issue_severity}**: ${issue.issue_text} (${issue.filename}:${issue.line_number})\n`;
              });
              if (banditIssues.length > 10) {
                comment += `- ... and ${banditIssues.length - 10} more issues\n`;
              }
              comment += '\n';
            }

            if (safetyIssues.length > 0) {
              comment += `### ⚠️ Safety Vulnerability Issues (${safetyIssues.length})\n`;
              safetyIssues.slice(0, 10).forEach(issue => {
                comment += `- **${issue.vulnerability_id}**: ${issue.advisory} (${issue.package_name})\n`;
              });
              if (safetyIssues.length > 10) {
                comment += `- ... and ${safetyIssues.length - 10} more issues\n`;
              }
              comment += '\n';
            }

            if (banditIssues.length === 0 && safetyIssues.length === 0) {
              comment += '✅ No security issues found!\n';
            }

            comment += '\n---\n*This comment was automatically generated by the security scan workflow.*';

            // Post comment
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
