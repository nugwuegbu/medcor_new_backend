name: Deploy to Production

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run linting
        run: |
          pip install flake8 black isort
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          black --check .
          isort --check-only .

      - name: Run tests
        run: |
          python manage.py test --settings=medcor_backend2.test_settings

      - name: Security check
        run: |
          pip install bandit safety
          bandit -r . -f json -o bandit-report.json || true
          safety check --json > safety-report.json || true

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Prepare deployment
        run: |
          echo "Preparing traditional deployment (no Docker build needed)"

      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT }}
          script: |
            # Navigate to project directory
            cd /var/www/html/medcor_backend2

            # SAFETY CHECK: Ensure we don't accidentally delete venv
            echo "üîí SAFETY CHECK: Protecting existing venv directory..."
            if [ -d "venv" ]; then
              echo "‚úÖ Existing venv found - WILL BE PRESERVED"
              echo "‚ö†Ô∏è  Deployment will NOT delete or recreate venv"
            else
              echo "‚ö†Ô∏è  No existing venv found - will create new one"
            fi

            echo "üöÄ Starting MedCor Backend deployment..."

            # Setup virtual environment - PRESERVE EXISTING VENV
            echo "üîß Setting up virtual environment..."
            if [ -d "venv" ] && [ -f "venv/bin/activate" ]; then
              echo "‚úÖ Using existing virtual environment (PRESERVED)"
              echo "‚ö†Ô∏è  NOT deleting or recreating existing venv"
              source venv/bin/activate
              echo "‚úÖ Virtual environment activated successfully"
            else
              echo "‚ö†Ô∏è  Virtual environment not found or corrupted, creating new one..."
              echo "‚ö†Ô∏è  This should only happen on first deployment"
              python3 -m venv venv
              source venv/bin/activate
              echo "‚úÖ New virtual environment created"
            fi

            # Install dependencies
            echo "üì¶ Installing dependencies..."
            pip install --upgrade pip
            pip install -r requirements.txt
            echo "‚úÖ Dependencies installed"

            # Copy environment file if needed
            if [ -f "env.prod" ] && [ ! -f ".env" ]; then
              cp env.prod .env
              echo "‚úÖ Environment file copied"
            fi

            # Run database migrations
            echo "üóÑÔ∏è Running database migrations..."
            python manage.py migrate
            echo "‚úÖ Database migrations completed"

            # Collect static files
            echo "üìÅ Collecting static files..."
            python manage.py collectstatic --noinput
            echo "‚úÖ Static files collected"

            # Start services
            echo "üöÄ Starting services..."

            # Start gunicorn service
            sudo systemctl enable gunicorn.service 2>/dev/null || true
            sudo systemctl start gunicorn.service 2>/dev/null || {
              echo "‚ö†Ô∏è  Failed to start gunicorn.service, trying alternative approach..."
              cd /var/www/html/medcor_backend2
              source venv/bin/activate
              nohup gunicorn --bind 127.0.0.1:8000 medcor_backend2.wsgi:application --daemon 2>/dev/null || true
            }
            echo "‚úÖ Gunicorn service started"

            # Start celery service
            sudo systemctl enable celery.service 2>/dev/null || true
            sudo systemctl start celery.service 2>/dev/null || {
              echo "‚ö†Ô∏è  Failed to start celery.service, trying alternative approach..."
              cd /var/www/html/medcor_backend2
              source venv/bin/activate
              nohup celery -A medcor_backend2 worker --loglevel=info --daemon 2>/dev/null || true
            }
            echo "‚úÖ Celery service started"

            # Start RabbitMQ
            sudo systemctl start rabbitmq-server 2>/dev/null || true
            echo "‚úÖ RabbitMQ started"

            # Restart nginx
            sudo systemctl restart nginx 2>/dev/null || true
            echo "‚úÖ Nginx restarted"

            # Wait for services to start
            echo "‚è≥ Waiting for services to start..."
            sleep 10

            # Check service health
            echo "üè• Checking service health..."

            # Check gunicorn
            if systemctl is-active --quiet gunicorn.service 2>/dev/null || pgrep -f gunicorn > /dev/null 2>&1; then
              echo "‚úÖ Gunicorn service is running"
            else
              echo "‚ö†Ô∏è  Gunicorn service may not be running properly"
            fi

            # Check celery
            if systemctl is-active --quiet celery.service 2>/dev/null || pgrep -f celery > /dev/null 2>&1; then
              echo "‚úÖ Celery service is running"
            else
              echo "‚ö†Ô∏è  Celery service may not be running properly"
            fi

            # Check nginx
            if systemctl is-active --quiet nginx 2>/dev/null; then
              echo "‚úÖ Nginx service is running"
            else
              echo "‚ö†Ô∏è  Nginx service may not be running properly"
            fi

            # Check RabbitMQ
            if systemctl is-active --quiet rabbitmq-server 2>/dev/null; then
              echo "‚úÖ RabbitMQ service is running"
            else
              echo "‚ö†Ô∏è  RabbitMQ service may not be running properly"
            fi

            # Test API endpoint
            if curl -f https://api.medcor.ai/api/health/ > /dev/null 2>&1; then
              echo "‚úÖ API endpoint is responding (HTTPS)"
            elif curl -f http://api.medcor.ai/api/health/ > /dev/null 2>&1; then
              echo "‚úÖ API endpoint is responding (HTTP)"
            elif curl -f http://localhost:8000/api/health/ > /dev/null 2>&1; then
              echo "‚úÖ API endpoint is responding (localhost)"
            else
              echo "‚ö†Ô∏è  API endpoint is not responding - check service logs"
            fi

            echo "üéâ Deployment completed!"
            echo "üåê API should be available at: https://api.medcor.ai"
            echo "üìö API Documentation: https://api.medcor.ai/api/schema/swagger-ui/"
            echo "üîß Admin Interface: https://api.medcor.ai/admin/"

  notify:
    needs: [test, build-and-deploy]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Notify deployment status
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT }}
          script: |
            if [ "${{ job.status }}" == "success" ]; then
              echo "‚úÖ Deployment successful! MedCor Backend updated to commit ${{ github.sha }}"
              # You can add notification logic here (Slack, Discord, email, etc.)
            else
              echo "‚ùå Deployment failed! Check the logs for details."
              # You can add failure notification logic here
            fi
