name: Deploy to Production

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run linting
        run: |
          pip install flake8 black isort
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          black --check .
          isort --check-only .

      - name: Run tests
        run: |
          python manage.py test --settings=medcor_backend2.test_settings

      - name: Security check
        run: |
          pip install bandit safety
          bandit -r . -f json -o bandit-report.json || true
          safety check --json > safety-report.json || true

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Prepare deployment
        run: |
          echo "Preparing traditional deployment (no Docker build needed)"

      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT }}
          script: |
            # Navigate to project directory
            cd /var/www/html/medcor_backend2

            # Check if we can pull with current configuration
            echo "Attempting to pull latest code..."
            if git pull origin main; then
              echo "✅ Successfully pulled latest code"
            else
              echo "⚠️  Git pull failed, trying to fix authentication..."
              
              # Try to configure git for SSH access
              git remote set-url origin git@github.com:${{ github.repository }}.git
              
              # Try pulling again
              if git pull origin main; then
                echo "✅ Successfully pulled with SSH"
              else
                echo "❌ Git pull failed. Please check SSH key configuration on server."
                echo "The server needs SSH access to GitHub repository."
                echo "Run: ssh-keygen -t rsa -b 4096 -C 'your-email@example.com'"
                echo "Then add the public key to GitHub repository settings."
                exit 1
              fi
            fi

            # Make deployment script executable
            chmod +x scripts/traditional-deploy.sh

            # Run traditional deployment
            ./scripts/traditional-deploy.sh

  notify:
    needs: [test, build-and-deploy]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Notify deployment status
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT }}
          script: |
            if [ "${{ job.status }}" == "success" ]; then
              echo "✅ Deployment successful! MedCor Backend updated to commit ${{ github.sha }}"
              # You can add notification logic here (Slack, Discord, email, etc.)
            else
              echo "❌ Deployment failed! Check the logs for details."
              # You can add failure notification logic here
            fi
