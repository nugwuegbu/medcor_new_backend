name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: "3.11"

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: medcor_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      rabbitmq:
        image: rabbitmq:3-management
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5672:5672
          - 15672:15672

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

       - name: Install dependencies
         run: |
           python -m pip install --upgrade pip
           pip install -r requirements.txt
           pip install -r requirements-dev.txt

       - name: Set up test environment
         run: |
           cp env.example .env
           echo "DATABASE_ENGINE=django.db.backends.postgresql" >> .env
           echo "DATABASE_NAME=medcor_test" >> .env
           echo "DATABASE_USER=postgres" >> .env
           echo "DATABASE_PASS=postgres" >> .env
           echo "DATABASE_HOST=localhost" >> .env
           echo "DATABASE_PORT=5432" >> .env
           echo "CELERY_BROKER_URL=amqp://guest:guest@localhost:5672//" >> .env
           echo "DEBUG=True" >> .env
           echo "SECRET_KEY=test-secret-key" >> .env

      - name: Run database migrations
        run: |
          python manage.py migrate --settings=medcor_backend2.test_settings

      - name: Run linting
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=venv,migrations
          black --check . --exclude=venv,migrations
          isort --check-only . --skip=venv --skip=migrations

      - name: Run security checks
        run: |
          bandit -r core/ appointments/ medical_records/ treatments/ subscription_plans/ specialty/ tenants/ youcam/ email_service/ -f json -o bandit-report.json --severity-level medium || true
          safety check --json > safety-report.json || true

      - name: Run tests
        run: |
          python manage.py test --settings=medcor_backend2.test_settings --verbosity=2

      - name: Generate coverage report
        run: |
          coverage run --source='.' manage.py test --settings=medcor_backend2.test_settings
          coverage report
          coverage xml

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports
          path: |
            bandit-report.json
            safety-report.json
            coverage.xml
